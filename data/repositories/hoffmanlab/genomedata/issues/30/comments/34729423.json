{"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/issues/30/comments/34729423.json"}, "html": {"href": "#!/hoffmanlab/genomedata/issues/30#comment-34729423"}}, "issue": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/issues/30.json"}}, "type": "issue", "id": 30, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "title": "Unsorted input can result in > 100x slower performance"}, "content": {"raw": "I did indeed only sort by both (via [`bedtools sort`](http://bedtools.readthedocs.io/en/latest/content/tools/sort.html)). I did not conduct any further testing.\n\nI do not think that this is particularly surprising, given the nature of the HDF5 archive construction. I believe unsorted data causes the same super-contigs to be repeatedly opened and closed, resulting in substantial overhead. This appeared to be corroborated by my log files for the unsorted data, which simply consisted of repeated instances of the usual per-region reading and writing operations (`chr[1-22XY]`, [...], `allocating memory for \\d+ floats`, `reading \\d+ floats... done`, ..., `writing \\d+ floats... done`).", "markup": "markdown", "html": "<p>I did indeed only sort by both (via <a data-is-external-link=\"true\" href=\"http://bedtools.readthedocs.io/en/latest/content/tools/sort.html\" rel=\"nofollow\"><code>bedtools sort</code></a>). I did not conduct any further testing.</p>\n<p>I do not think that this is particularly surprising, given the nature of the HDF5 archive construction. I believe unsorted data causes the same super-contigs to be repeatedly opened and closed, resulting in substantial overhead. This appeared to be corroborated by my log files for the unsorted data, which simply consisted of repeated instances of the usual per-region reading and writing operations (<code>chr[1-22XY]</code>, [...], <code>allocating memory for \\d+ floats</code>, <code>reading \\d+ floats... done</code>, ..., <code>writing \\d+ floats... done</code>).</p>", "type": "rendered"}, "created_on": "2017-02-27T15:56:33.196181+00:00", "user": {"display_name": "Coby Viner", "uuid": "{5c0277b2-d18f-432a-9ff0-3377d3063bd6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5c0277b2-d18f-432a-9ff0-3377d3063bd6%7D"}, "html": {"href": "https://bitbucket.org/%7B5c0277b2-d18f-432a-9ff0-3377d3063bd6%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/30ee4699432a3591c043fbe3d4bff771d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCV-5.png"}}, "nickname": "cviner2", "type": "user", "account_id": "557058:278c659b-177a-486c-bf20-6982986d7e43"}, "updated_on": null, "type": "issue_comment", "id": 34729423}