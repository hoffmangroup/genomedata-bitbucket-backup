{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "links": {"attachments": {"href": "data/repositories/hoffmanlab/genomedata/issues/47/attachments_page=1.json"}, "self": {"href": "data/repositories/hoffmanlab/genomedata/issues/47.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/genomedata/issues/47/watch"}, "comments": {"href": "data/repositories/hoffmanlab/genomedata/issues/47/comments_page=1.json"}, "html": {"href": "#!/hoffmanlab/genomedata/issues/47/assert-statements-from"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/genomedata/issues/47/vote"}}, "reporter": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "title": "\"assert\" statements from genomedata_load_data.c may errenously remove functionality", "component": null, "votes": 0, "watches": 1, "content": {"raw": "In `genomedata_load_data.c` there are a large amount of assert statements used to check return values from functions. These assert macros may wrap around the function calls themselves however, and depending on the environment configuration, may remove the function call altogether. For example in main:\r\n```c\r\nint main(int argc, char **argv) {\r\n  struct arguments arguments;\r\n  char *gdfilename, *trackname;\r\n  bool verbose;\r\n\r\n  /* default value */\r\n  arguments.verbose = DEFAULT_VERBOSE;\r\n\r\n  assert(argp_parse(&argp, argc, argv, 0, 0, &arguments) == 0);\r\n\r\n  gdfilename = arguments.args[0];\r\n  trackname = arguments.args[1];\r\n  verbose = arguments.verbose;\r\n\r\n  load_data(gdfilename, trackname, verbose);\r\n}\r\n```\r\nIf 'NDEBUG' is defined as a marco (e.g. in `CPPFLAGS`) then no arguments get parsed with `argp_parse`. This has shown to be an issue recently in conda environments.", "markup": "markdown", "html": "<p>In <code>genomedata_load_data.c</code> there are a large amount of assert statements used to check return values from functions. These assert macros may wrap around the function calls themselves however, and depending on the environment configuration, may remove the function call altogether. For example in main:</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">struct</span> <span class=\"n\">arguments</span> <span class=\"n\">arguments</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">gdfilename</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">trackname</span><span class=\"p\">;</span>\n  <span class=\"kt\">bool</span> <span class=\"n\">verbose</span><span class=\"p\">;</span>\n\n  <span class=\"cm\">/* default value */</span>\n  <span class=\"n\">arguments</span><span class=\"p\">.</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_VERBOSE</span><span class=\"p\">;</span>\n\n  <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">argp_parse</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">argp</span><span class=\"p\">,</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">arguments</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n  <span class=\"n\">gdfilename</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"n\">trackname</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">.</span><span class=\"n\">verbose</span><span class=\"p\">;</span>\n\n  <span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"n\">gdfilename</span><span class=\"p\">,</span> <span class=\"n\">trackname</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>If 'NDEBUG' is defined as a marco (e.g. in <code>CPPFLAGS</code>) then no arguments get parsed with <code>argp_parse</code>. This has shown to be an issue recently in conda environments.</p>", "type": "rendered"}, "assignee": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "state": "new", "version": null, "edited_on": null, "created_on": "2018-12-19T16:49:59.865486+00:00", "milestone": null, "updated_on": "2019-02-24T19:45:49.164219+00:00", "type": "issue", "id": 47}