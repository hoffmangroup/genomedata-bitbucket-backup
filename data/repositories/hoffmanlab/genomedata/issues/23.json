{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "links": {"attachments": {"href": "data/repositories/hoffmanlab/genomedata/issues/23/attachments_page=1.json"}, "self": {"href": "data/repositories/hoffmanlab/genomedata/issues/23.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/genomedata/issues/23/watch"}, "comments": {"href": "data/repositories/hoffmanlab/genomedata/issues/23/comments_page=1.json"}, "html": {"href": "#!/hoffmanlab/genomedata/issues/23/genomedata-load-does-not-throw-the-correct"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/genomedata/issues/23/vote"}}, "reporter": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "title": "genomedata-load does not throw the correct error when given improper input", "component": null, "votes": 0, "watches": 1, "content": {"raw": "From [pull request 15](#!/hoffmanlab/genomedata/pull-requests/15/infer-track-names-from-signal-files/):\r\n\r\ngenomedata-load does not throw the correct error when given improper input. For example, when the input should be '-t TRACK=FILE.BED', and it is instead given '-t FILE.BED', it will throw the error:\r\n\r\n\r\n```\r\n#!python\r\n\r\nCould not find track file: \r\n```\r\n\r\n I suspect that error is not what is meant to happen, since it's located at: \r\n\r\n```\r\n#!python\r\n\r\n100         if tracks is not None and len(tracks) > 0:\r\n101             # Open hdf5 with track names\r\n102             try:\r\n103                 track_names = []\r\n104                 for track_name, track_filename in tracks:\r\n105                     if path(track_filename).isfile():\r\n106                         if track_name not in track_names:  # No duplicates\r\n107                             track_names.append(track_name)\r\n108                     else:\r\n109                         die(\"Could not find track file: %s\" % track_filename)\r\n110             except ValueError:\r\n111                 die(\"Error saving data from tracks: %s\" % tracks)\r\n```\r\n\r\nwhich assumes correct track_name, track_filenames. Instead, I think the ValueError here (earlier in the code) should be thrown instead:\r\n\r\n```\r\n#!python\r\n\r\n    # Parse tracks into list of tuples\r\n    try:\r\n        tracks = []\r\n        for track_expr in args.track:\r\n            track_name, _, track_filename = track_expr.partition(\"=\")\r\n            tracks.append((track_name, track_filename))  # Tuple\r\n    except ValueError:\r\n        die((\"Error parsing track expression: %s\\Specify tracks\"\r\n             \"in NAME=FILE form, such as: -t high=signal.high\") % track_expr)\r\n```\r\n\r\nIf \"-t test.bed\" is specified, track_name will be test.bed and track_filename will be \"\" (hence why the error message is blank).\r\n\r\nWith further investigation, even with \"a=b=c\", it passes (\"a\" becomes track_name, and \"b=c\" becomes track_filename), when I think one should expect a ValueError to be thrown.\r\n\r\nI don't know how 'strict' we want to be with allowing/disallowing certain expressions (such as \"a=b=c\") or leave it up to the user to specify the correct expression. But if we want to implement checks, this can be solved with a check for the number of equals signs in the track_expr expression.", "markup": "markdown", "html": "<p>From <a data-is-external-link=\"true\" href=\"#!/hoffmanlab/genomedata/pull-requests/15/infer-track-names-from-signal-files/\" rel=\"nofollow\">pull request 15</a>:</p>\n<p>genomedata-load does not throw the correct error when given improper input. For example, when the input should be '-t TRACK=FILE.BED', and it is instead given '-t FILE.BED', it will throw the error:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Could</span> <span class=\"ow\">not</span> <span class=\"n\">find</span> <span class=\"n\">track</span> <span class=\"nb\">file</span><span class=\"p\">:</span> \n</pre></div>\n\n\n<p>I suspect that error is not what is meant to happen, since it's located at: </p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"mi\">100</span>         <span class=\"k\">if</span> <span class=\"n\">tracks</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tracks</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"mi\">101</span>             <span class=\"c1\"># Open hdf5 with track names</span>\n<span class=\"mi\">102</span>             <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"mi\">103</span>                 <span class=\"n\">track_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"mi\">104</span>                 <span class=\"k\">for</span> <span class=\"n\">track_name</span><span class=\"p\">,</span> <span class=\"n\">track_filename</span> <span class=\"ow\">in</span> <span class=\"n\">tracks</span><span class=\"p\">:</span>\n<span class=\"mi\">105</span>                     <span class=\"k\">if</span> <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"n\">track_filename</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">():</span>\n<span class=\"mi\">106</span>                         <span class=\"k\">if</span> <span class=\"n\">track_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">track_names</span><span class=\"p\">:</span>  <span class=\"c1\"># No duplicates</span>\n<span class=\"mi\">107</span>                             <span class=\"n\">track_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">track_name</span><span class=\"p\">)</span>\n<span class=\"mi\">108</span>                     <span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"mi\">109</span>                         <span class=\"n\">die</span><span class=\"p\">(</span><span class=\"s2\">&quot;Could not find track file: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">track_filename</span><span class=\"p\">)</span>\n<span class=\"mi\">110</span>             <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n<span class=\"mi\">111</span>                 <span class=\"n\">die</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error saving data from tracks: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">tracks</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>which assumes correct track_name, track_filenames. Instead, I think the ValueError here (earlier in the code) should be thrown instead:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"c1\"># Parse tracks into list of tuples</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">tracks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">track_expr</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">track</span><span class=\"p\">:</span>\n            <span class=\"n\">track_name</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">track_filename</span> <span class=\"o\">=</span> <span class=\"n\">track_expr</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">tracks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">track_name</span><span class=\"p\">,</span> <span class=\"n\">track_filename</span><span class=\"p\">))</span>  <span class=\"c1\"># Tuple</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"n\">die</span><span class=\"p\">((</span><span class=\"s2\">&quot;Error parsing track expression: </span><span class=\"si\">%s</span><span class=\"s2\">\\Specify tracks&quot;</span>\n             <span class=\"s2\">&quot;in NAME=FILE form, such as: -t high=signal.high&quot;</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">track_expr</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>If \"-t test.bed\" is specified, track_name will be test.bed and track_filename will be \"\" (hence why the error message is blank).</p>\n<p>With further investigation, even with \"a=b=c\", it passes (\"a\" becomes track_name, and \"b=c\" becomes track_filename), when I think one should expect a ValueError to be thrown.</p>\n<p>I don't know how 'strict' we want to be with allowing/disallowing certain expressions (such as \"a=b=c\") or leave it up to the user to specify the correct expression. But if we want to implement checks, this can be solved with a check for the number of equals signs in the track_expr expression.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2016-07-19T16:51:29.148724+00:00", "milestone": null, "updated_on": "2016-07-19T16:54:39.159314+00:00", "type": "issue", "id": 23}