{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41665287.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41665287"}}, "parent": {"id": 41663856, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41663856.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41663856"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "The history of this change in Python is a bit confusing:\n\nhttps://bugs.python.org/issue19622\nhttps://bugs.python.org/issue17488\n\nI think the change in default `bufsize` is to counteract *other* changes elsewhere in the way Python handles I/O, and it doesn't exactly reproduce what happened before. I would leave `bufsize` unspecified here. If the tests still run it probably won't break anything and probably will be more performant on Python 3.", "markup": "markdown", "html": "<p>The history of this change in Python is a bit confusing:</p>\n<p><a href=\"https://bugs.python.org/issue19622\" rel=\"nofollow\" class=\"ap-connect-link\">https://bugs.python.org/issue19622</a>\n<a href=\"https://bugs.python.org/issue17488\" rel=\"nofollow\" class=\"ap-connect-link\">https://bugs.python.org/issue17488</a></p>\n<p>I think the change in default <code>bufsize</code> is to counteract <em>other</em> changes elsewhere in the way Python handles I/O, and it doesn't exactly reproduce what happened before. I would leave <code>bufsize</code> unspecified here. If the tests still run it probably won't break anything and probably will be more performant on Python 3.</p>", "type": "rendered"}, "created_on": "2017-07-27T18:45:04.907293+00:00", "user": {"display_name": "Michael Hoffman", "uuid": "{ffa8e039-5d4d-4f69-a4ba-ac25cbaf700b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bffa8e039-5d4d-4f69-a4ba-ac25cbaf700b%7D"}, "html": {"href": "https://bitbucket.org/%7Bffa8e039-5d4d-4f69-a4ba-ac25cbaf700b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6a95e857a02504cbad5fe965c9d9e4bbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMH-1.png"}}, "nickname": "hoffman", "type": "user", "account_id": "557058:a9657985-692c-405c-995b-4e41cda7ba2b"}, "inline": {}, "updated_on": "2017-07-27T18:45:04.910808+00:00", "type": "pullrequest_comment", "id": 41665287}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41664092.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41664092"}}, "parent": {"id": 41661885, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661885.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661885"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "It doesn't. Sorry. I meant specifically that text stored to the HDF5 file, and specifically sequence data, should be done without any special encoding. Bytes/ASCII should be more than sufficient.\n\nThe only ambiguity comes from `seq2str` which implies that a sequence is being cast to a `str` type in python3, which in this case it looks like it's not.", "markup": "markdown", "html": "<p>It doesn't. Sorry. I meant specifically that text stored to the HDF5 file, and specifically sequence data, should be done without any special encoding. Bytes/ASCII should be more than sufficient.</p>\n<p>The only ambiguity comes from <code>seq2str</code> which implies that a sequence is being cast to a <code>str</code> type in python3, which in this case it looks like it's not.</p>", "type": "rendered"}, "created_on": "2017-07-27T18:28:37.244693+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2017-07-27T18:28:37.248116+00:00", "type": "pullrequest_comment", "id": 41664092}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41663856.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41663856"}}, "parent": {"id": 41661738, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661738.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661738"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "I see that the docs are inconsistent here. Python 2 docs say the default is unbuffered. Python 3 says to match what would be expected from Python 2, it should be buffered. I don't see any reason why it shouldn't be buffered though I can see the case for keeping it unbuffered. I think the code can stay as-is and this is not a big deal unless @hoffman has anything to add to this.", "markup": "markdown", "html": "<p>I see that the docs are inconsistent here. Python 2 docs say the default is unbuffered. Python 3 says to match what would be expected from Python 2, it should be buffered. I don't see any reason why it shouldn't be buffered though I can see the case for keeping it unbuffered. I think the code can stay as-is and this is not a big deal unless @hoffman has anything to add to this.</p>", "type": "rendered"}, "created_on": "2017-07-27T18:25:31.789516+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2017-07-27T18:25:31.800411+00:00", "type": "pullrequest_comment", "id": 41663856}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41662440.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41662440"}}, "parent": {"id": 41661313, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661313.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661313"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "OK. So why the cast to a list? `items` returns a list on it's own in Python 2, and in Python 3 it returns an iterator.", "markup": "markdown", "html": "<p>OK. So why the cast to a list? <code>items</code> returns a list on it's own in Python 2, and in Python 3 it returns an iterator.</p>", "type": "rendered"}, "created_on": "2017-07-27T18:06:19.972645+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2017-07-27T18:06:19.975161+00:00", "type": "pullrequest_comment", "id": 41662440}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661885.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661885"}}, "parent": {"id": 41661709, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661709.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661709"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "I was confused by:\n\n\n```\n#!python\n\nWe should always expect a \"str\" type regardless of Python 2 or 3\n```\n\nwhich implies stored sequences should be of unicode str type in python 3, not byte as we discussed? Perhaps I'm not familiar enough with genomedata, but I don't understand what this has to do with tracknames?\n\nThanks!", "markup": "markdown", "html": "<p>I was confused by:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">We</span> <span class=\"n\">should</span> <span class=\"n\">always</span> <span class=\"n\">expect</span> <span class=\"n\">a</span> <span class=\"s2\">&quot;str&quot;</span> <span class=\"nb\">type</span> <span class=\"n\">regardless</span> <span class=\"n\">of</span> <span class=\"n\">Python</span> <span class=\"mi\">2</span> <span class=\"ow\">or</span> <span class=\"mi\">3</span>\n</pre></div>\n\n\n<p>which implies stored sequences should be of unicode str type in python 3, not byte as we discussed? Perhaps I'm not familiar enough with genomedata, but I don't understand what this has to do with tracknames?</p>\n<p>Thanks!</p>", "type": "rendered"}, "created_on": "2017-07-27T18:04:13.192314+00:00", "user": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "inline": {}, "updated_on": "2017-07-27T18:04:13.195394+00:00", "type": "pullrequest_comment", "id": 41661885}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661738.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661738"}}, "parent": {"id": 41661592, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661592.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661592"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "But for Python 2, it was:\n\n```\n#!python\n\n\nclass subprocess.Popen(args, bufsize=0\n...\nThe default value for bufsize is 0 (unbuffered).\n```\n\n? A default of -1 in Python 3 means:\n\n\n```\n#!python\n\nnegative bufsize (the default) means the system default of io.DEFAULT_BUFFER_SIZE will be used.\n\n```\nwhich is different?", "markup": "markdown", "html": "<p>But for Python 2, it was:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">bufsize</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"o\">...</span>\n<span class=\"n\">The</span> <span class=\"n\">default</span> <span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">bufsize</span> <span class=\"ow\">is</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"n\">unbuffered</span><span class=\"p\">)</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>? A default of -1 in Python 3 means:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">negative</span> <span class=\"n\">bufsize</span> <span class=\"p\">(</span><span class=\"n\">the</span> <span class=\"n\">default</span><span class=\"p\">)</span> <span class=\"n\">means</span> <span class=\"n\">the</span> <span class=\"n\">system</span> <span class=\"n\">default</span> <span class=\"n\">of</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_BUFFER_SIZE</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">used</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>which is different?</p>", "type": "rendered"}, "created_on": "2017-07-27T18:02:04.769810+00:00", "user": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "inline": {}, "updated_on": "2017-07-27T18:02:04.772784+00:00", "type": "pullrequest_comment", "id": 41661738}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661709.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661709"}}, "parent": {"id": 41661243, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661243.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661243"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "It was my understanding that tracknames stored in the HDF5 file were going to be non-utf8 encoded or 'byte' type. In this case the name 'seq2str' is misleading when under python 3.", "markup": "markdown", "html": "<p>It was my understanding that tracknames stored in the HDF5 file were going to be non-utf8 encoded or 'byte' type. In this case the name 'seq2str' is misleading when under python 3.</p>", "type": "rendered"}, "created_on": "2017-07-27T18:01:36.890040+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2017-07-27T18:01:36.892658+00:00", "type": "pullrequest_comment", "id": 41661709}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661598.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661598"}}, "parent": {"id": 41659290, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41659290.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41659290"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "Hi @ericr86, I don't see a way to add attachments to PRs... I only see an option to add reviewers and to close the branch when the PR is complete", "markup": "markdown", "html": "<p>Hi @ericr86, I don't see a way to add attachments to PRs... I only see an option to add reviewers and to close the branch when the PR is complete</p>", "type": "rendered"}, "created_on": "2017-07-27T17:59:54.278411+00:00", "user": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "updated_on": "2017-07-27T17:59:54.288637+00:00", "type": "pullrequest_comment", "id": 41661598}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661592.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661592"}}, "parent": {"id": 41661193, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661193.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661193"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "\"Changed in version 3.3.1: bufsize now defaults to -1 to enable buffering by default to match the behavior that most code expects. In versions prior to Python 3.2.4 and 3.3.1 it incorrectly defaulted to 0 which was unbuffered and allowed short reads. This was unintentional and did not match the behavior of Python 2 as most code expected.\"\n\nIt sounds like the default was supposed to be -1 but wasn't for Python 3 versions before 3.2.4 and 3.3.1. Now it's back to it's \"correct\" default value of -1 which is in line with what the default was back in Python 2.\n\nIt looks this should be removed or explicitly set to -1.", "markup": "markdown", "html": "<p>\"Changed in version 3.3.1: bufsize now defaults to -1 to enable buffering by default to match the behavior that most code expects. In versions prior to Python 3.2.4 and 3.3.1 it incorrectly defaulted to 0 which was unbuffered and allowed short reads. This was unintentional and did not match the behavior of Python 2 as most code expected.\"</p>\n<p>It sounds like the default was supposed to be -1 but wasn't for Python 3 versions before 3.2.4 and 3.3.1. Now it's back to it's \"correct\" default value of -1 which is in line with what the default was back in Python 2.</p>\n<p>It looks this should be removed or explicitly set to -1.</p>", "type": "rendered"}, "created_on": "2017-07-27T17:59:47.079148+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2017-07-27T17:59:47.081410+00:00", "type": "pullrequest_comment", "id": 41661592}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661313.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661313"}}, "parent": {"id": 41660034, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41660034.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41660034"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "`iteritems` no longer exists in python 3: [ref](https://stackoverflow.com/questions/13998492/iteritems-in-python)", "markup": "markdown", "html": "<p><code>iteritems</code> no longer exists in python 3: <a data-is-external-link=\"true\" href=\"https://stackoverflow.com/questions/13998492/iteritems-in-python\" rel=\"nofollow\">ref</a></p>", "type": "rendered"}, "created_on": "2017-07-27T17:56:15.795945+00:00", "user": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "inline": {}, "updated_on": "2017-07-27T17:56:15.799267+00:00", "type": "pullrequest_comment", "id": 41661313}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661243.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661243"}}, "parent": {"id": 41659918, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41659918.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41659918"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "I thought we discussed that sequences should be of byte type?", "markup": "markdown", "html": "<p>I thought we discussed that sequences should be of byte type?</p>", "type": "rendered"}, "created_on": "2017-07-27T17:55:27.561357+00:00", "user": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "inline": {}, "updated_on": "2017-07-27T17:55:27.563872+00:00", "type": "pullrequest_comment", "id": 41661243}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41661193.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41661193"}}, "parent": {"id": 41659994, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41659994.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41659994"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "The defaults for Popen change between python 2 and 3; `bufsize` is added so the behaviors will match between the two. [ref](https://docs.python.org/2/library/subprocess.html), [ref](https://docs.python.org/3/library/subprocess.html)", "markup": "markdown", "html": "<p>The defaults for Popen change between python 2 and 3; <code>bufsize</code> is added so the behaviors will match between the two. <a data-is-external-link=\"true\" href=\"https://docs.python.org/2/library/subprocess.html\" rel=\"nofollow\">ref</a>, <a data-is-external-link=\"true\" href=\"https://docs.python.org/3/library/subprocess.html\" rel=\"nofollow\">ref</a></p>", "type": "rendered"}, "created_on": "2017-07-27T17:54:50.096945+00:00", "user": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "inline": {}, "updated_on": "2017-07-27T17:54:50.100489+00:00", "type": "pullrequest_comment", "id": 41661193}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41660068.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41660068"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "@rcwchan this is ready for your review", "markup": "markdown", "html": "<p>@rcwchan this is ready for your review</p>", "type": "rendered"}, "created_on": "2017-07-27T17:37:41.091463+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2017-07-27T17:37:41.108711+00:00", "type": "pullrequest_comment", "id": 41660068}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41660034.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41660034"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "Why was this change?", "markup": "markdown", "html": "<p>Why was this change?</p>", "type": "rendered"}, "created_on": "2017-07-27T17:37:08.093285+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2017-07-27T17:37:08.096819+00:00", "type": "pullrequest_comment", "id": 41660034}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41659994.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41659994"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "Can you explain these bufsize changes? Inheriently it would make sense to have some sort of buffering for a stream.", "markup": "markdown", "html": "<p>Can you explain these bufsize changes? Inheriently it would make sense to have some sort of buffering for a stream.</p>", "type": "rendered"}, "created_on": "2017-07-27T17:36:39.010345+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2017-07-27T17:36:39.012775+00:00", "type": "pullrequest_comment", "id": 41659994}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41659918.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41659918"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "seq2str is oddly named here. We should always expect a \"str\" type regardless of Python 2 or 3", "markup": "markdown", "html": "<p>seq2str is oddly named here. We should always expect a \"str\" type regardless of Python 2 or 3</p>", "type": "rendered"}, "created_on": "2017-07-27T17:35:20.346609+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2017-07-27T17:35:20.349072+00:00", "type": "pullrequest_comment", "id": 41659918}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41659694.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41659694"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "so if the line is of type 'bytes', it's decoded with utf-8? Shouldn't this only be decoded if it's a Python 3 string?", "markup": "markdown", "html": "<p>so if the line is of type 'bytes', it's decoded with utf-8? Shouldn't this only be decoded if it's a Python 3 string?</p>", "type": "rendered"}, "created_on": "2017-07-27T17:32:04.639084+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2017-07-27T17:32:04.642499+00:00", "type": "pullrequest_comment", "id": 41659694}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41659384.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41659384"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "After the PR is complete could you please raise another issue regarding the test warnings?", "markup": "markdown", "html": "<p>After the PR is complete could you please raise another issue regarding the test warnings?</p>", "type": "rendered"}, "created_on": "2017-07-27T17:27:36.526579+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2017-07-27T17:27:36.528981+00:00", "type": "pullrequest_comment", "id": 41659384}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41659290.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41659290"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "If you can, could you move the diffs outside of a private server and place them anywhere else? Is it possible to attach them to the pull request? I know it's possible for Issues.", "markup": "markdown", "html": "<p>If you can, could you move the diffs outside of a private server and place them anywhere else? Is it possible to attach them to the pull request? I know it's possible for Issues.</p>", "type": "rendered"}, "created_on": "2017-07-27T17:26:16.779030+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2017-07-27T17:26:16.782011+00:00", "type": "pullrequest_comment", "id": 41659290}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding for our binary's case (which raises a `SyntaxError`):\r\n\r\n```\r\n#!python\r\n\r\n      File \"/scratch/software/lib/python3.6/tokenize.py\", line 395, in find_cookie\r\n        raise SyntaxError(msg)\r\n    SyntaxError: invalid or missing encoding declaration for 'build/scripts-3.6/Linux_x86_64/genomedata-load-data'\r\n```\r\n\r\n\r\nThe patch is taken from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cb877eff86f8", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/cb877eff86f8"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/cb877eff86f8"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-21T17:33:22.306697+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding. I got the idea from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cb877eff86f8", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/cb877eff86f8"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/cb877eff86f8"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-21T17:28:46.215656+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding. I got the idea from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4c6a07fea338", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/4c6a07fea338"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/4c6a07fea338"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-21T17:27:21.143896+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding. I got the idea from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "143360122f91", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/143360122f91"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/143360122f91"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-21T14:17:32.499100+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding. I got the idea from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8c63721151a4", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/8c63721151a4"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/8c63721151a4"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-21T14:14:32.909883+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding. I got the idea from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a74cb02eadcc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/a74cb02eadcc"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/a74cb02eadcc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-20T19:46:43.995421+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments/41200766.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23/_/diff#comment-41200766"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}, "content": {"raw": "@ericr86 I've moved from forked-path to the latest path.py; all tests still pass in both python 2 and 3", "markup": "markdown", "html": "<p>@ericr86 I've moved from forked-path to the latest path.py; all tests still pass in both python 2 and 3</p>", "type": "rendered"}, "created_on": "2017-07-20T19:44:36.847757+00:00", "user": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "updated_on": "2017-07-20T19:44:47.464565+00:00", "type": "pullrequest_comment", "id": 41200766}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding. I got the idea from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f09a2f0e6e7f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/f09a2f0e6e7f"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/f09a2f0e6e7f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-20T19:43:28.292195+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding. I got the idea from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3f4616ec79ea", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/3f4616ec79ea"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/3f4616ec79ea"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-20T19:26:09.416051+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding. I got the idea from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "98934bf00faa", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/98934bf00faa"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/98934bf00faa"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-20T19:22:38.309490+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding. I got the idea from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f83aa4e4d650", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/f83aa4e4d650"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/f83aa4e4d650"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-20T14:39:39.347359+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding. I got the idea from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* Everything worked fine in the tests I did but it is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f83aa4e4d650", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/f83aa4e4d650"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/f83aa4e4d650"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-20T14:36:53.099157+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}, {"update": {"description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding. I got the idea from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* Everything worked fine in the tests I did but it is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "title": "Genomedata python3 compatibility", "destination": {"commit": {"hash": "7f266732db1f", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/7f266732db1f.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/7f266732db1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f83aa4e4d650", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/f83aa4e4d650"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/f83aa4e4d650"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2017-07-20T14:36:53.022503+00:00"}, "pull_request": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}}, "title": "Genomedata python3 compatibility"}}]}