{"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/19/comments/37954931.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/19/_/diff#comment-37954931"}}, "parent": {"id": 37949899, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/19/comments/37949899.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/19/_/diff#comment-37949899"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 19, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/19.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/19"}}, "title": "Add feature to write data to archives"}, "content": {"raw": "Agree that it seems like at least some of the code could be made simpler by using pybedtools to perform the intersections. Would using pybedtools be faster than the current implementation?\n\n@ericr86 is it possible for the list here to be a generator?\n\n```\n#!python\n\nif any([(sorted_contigs[i].start - sorted_contigs[i-1].end) > 0  for i in range(1, num_supercontigs)])\n```\n\nUsing bedtools intersect would require taking the full intersection. If we could have a complete generator expression above, then it would stop at the first instance of 'True' and might actually be faster since it does not guarantee parsing through the full list of sorted contigs.", "markup": "markdown", "html": "<p>Agree that it seems like at least some of the code could be made simpler by using pybedtools to perform the intersections. Would using pybedtools be faster than the current implementation?</p>\n<p>@ericr86 is it possible for the list here to be a generator?</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">if</span> <span class=\"nb\">any</span><span class=\"p\">([(</span><span class=\"n\">sorted_contigs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">start</span> <span class=\"o\">-</span> <span class=\"n\">sorted_contigs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>  <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num_supercontigs</span><span class=\"p\">)])</span>\n</pre></div>\n\n\n<p>Using bedtools intersect would require taking the full intersection. If we could have a complete generator expression above, then it would stop at the first instance of 'True' and might actually be faster since it does not guarantee parsing through the full list of sorted contigs.</p>", "type": "rendered"}, "created_on": "2017-05-31T19:52:10.007374+00:00", "user": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "updated_on": "2017-05-31T19:52:10.019950+00:00", "type": "pullrequest_comment", "id": 37954931}