{"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/19/comments/37949899.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/19/_/diff#comment-37949899"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 19, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/19.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/19"}}, "title": "Add feature to write data to archives"}, "content": {"raw": "It looks like the logic of the code here is very similar to what bedtools intersect does.\n\nIn fact we could use bedtools python api 'pybedtools' to simplify this code and avoid redundancy with existing code. The drawback is that this requires adding an extra dependency to bedtools and pybedtools to genomedata, which I don't think is a problem for bioinformaticians.\n\nThe idea would be to create two BedTool objects **before** opening the archive for writing (before calling setitem):\n\n* object A contains the new coordinates that will be added to the archive\n* object B contains coordinates of all the supercontigs\n\nThen we can intersect objects A and B to find the intervals in A that do not overlap with B.\nIf the command returns any interval, it means that an interval in A overlaps with a gap so we can warn the user and stop here. \nOtherwise, we have the guarantee that all the intervals in A are within one or multiple supercontigs.\n\nThis approach has several additional advantages:\n- we can extract all the verifications (checking for overlap) from the real simple logic of the __setitem__ method\n- the more complex verification steps can be written in a different function which make it easier to test.\n\nIf you find this approach appealing, I think we can explore it further. For example, I am sure that we can use bedtools intersect efficiently to obtain a dict of (base_key -> supercontig).\n\n\n\n\n\n", "markup": "markdown", "html": "<p>It looks like the logic of the code here is very similar to what bedtools intersect does.</p>\n<p>In fact we could use bedtools python api 'pybedtools' to simplify this code and avoid redundancy with existing code. The drawback is that this requires adding an extra dependency to bedtools and pybedtools to genomedata, which I don't think is a problem for bioinformaticians.</p>\n<p>The idea would be to create two BedTool objects <strong>before</strong> opening the archive for writing (before calling setitem):</p>\n<ul>\n<li>object A contains the new coordinates that will be added to the archive</li>\n<li>object B contains coordinates of all the supercontigs</li>\n</ul>\n<p>Then we can intersect objects A and B to find the intervals in A that do not overlap with B.\nIf the command returns any interval, it means that an interval in A overlaps with a gap so we can warn the user and stop here. \nOtherwise, we have the guarantee that all the intervals in A are within one or multiple supercontigs.</p>\n<p>This approach has several additional advantages:\n- we can extract all the verifications (checking for overlap) from the real simple logic of the <strong>setitem</strong> method\n- the more complex verification steps can be written in a different function which make it easier to test.</p>\n<p>If you find this approach appealing, I think we can explore it further. For example, I am sure that we can use bedtools intersect efficiently to obtain a dict of (base_key -&gt; supercontig).</p>", "type": "rendered"}, "created_on": "2017-05-31T18:33:42.219714+00:00", "user": {"display_name": "Micka\u00ebl Mendez", "uuid": "{3e035b9e-0328-44e8-8622-5c7e9ed060b2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3e035b9e-0328-44e8-8622-5c7e9ed060b2%7D"}, "html": {"href": "https://bitbucket.org/%7B3e035b9e-0328-44e8-8622-5c7e9ed060b2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1cb7d89dcab61313d21c5ef402c28e11d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-0.png"}}, "nickname": "Mickael Mendez", "type": "user", "account_id": "557058:aae10d90-ba66-49cd-a04d-5392b943760d"}, "updated_on": "2017-05-31T21:04:26.687066+00:00", "type": "pullrequest_comment", "id": 37949899}