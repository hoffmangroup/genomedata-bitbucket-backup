{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15/comments/21154738.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15/_/diff#comment-21154738"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15"}}, "title": "Infer track names from signal files"}, "content": {"raw": "Split the two conditionals across lines", "markup": "markdown", "html": "<p>Split the two conditionals across lines</p>", "type": "rendered"}, "created_on": "2016-07-18T19:50:55.597013+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2016-07-18T19:50:55.599052+00:00", "type": "pullrequest_comment", "id": 21154738}, "pull_request": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15"}}, "title": "Infer track names from signal files"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15/comments/21154699.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15/_/diff#comment-21154699"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15"}}, "title": "Infer track names from signal files"}, "content": {"raw": "Update the docs and the NEWS with this change", "markup": "markdown", "html": "<p>Update the docs and the NEWS with this change</p>", "type": "rendered"}, "created_on": "2016-07-18T19:49:51.377753+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2016-07-18T19:49:51.385161+00:00", "type": "pullrequest_comment", "id": 21154699}, "pull_request": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15"}}, "title": "Infer track names from signal files"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15/comments/21154692.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15/_/diff#comment-21154692"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15"}}, "title": "Infer track names from signal files"}, "content": {"raw": "Can you separate the issue you caught to a a new open issue and provide an example with what is wrong.", "markup": "markdown", "html": "<p>Can you separate the issue you caught to a a new open issue and provide an example with what is wrong.</p>", "type": "rendered"}, "created_on": "2016-07-18T19:49:36.915094+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2016-07-18T19:49:36.920172+00:00", "type": "pullrequest_comment", "id": 21154692}, "pull_request": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15"}}, "title": "Infer track names from signal files"}}, {"update": {"description": "For example,\r\n\r\n\r\n```\r\n#!python\r\n\r\ngenomedata-load -t /absolute/filepath/here/test1.bed -t test2.bedGraph ...\r\n\r\n```\r\nresults in \r\n\r\n\r\n```\r\n#!python\r\n\r\ntrack name: test1 from track file: /absolute/filepath/here/test1.bed\r\ntrack name: test2 from track file: test2.bedGraph\r\n\r\n```\r\n\r\n---\r\n\r\nSome things of particular note:\r\n\r\nIn the original code for this section:\r\n\r\n\r\n```\r\n#!python\r\n\r\n    # Parse tracks into list of tuples\r\n    try:\r\n        tracks = []\r\n        for track_expr in args.track:\r\n            track_name, _, track_filename = track_expr.partition(\"=\")\r\n            tracks.append((track_name, track_filename))  # Tuple\r\n    except ValueError:\r\n        die((\"Error parsing track expression: %s\\Specify tracks\"\r\n             \"in NAME=FILE form, such as: -t high=signal.high\") % track_expr)\r\n```\r\n\r\none would expect, that before this pull request, if one specified \"-t track.bed\", ValueError would be thrown. However, this is not the case. In fact, genomedata-load will throw this error instead:\r\n\r\n\r\n```\r\n#!python\r\n\r\nCould not find track file: \r\n```\r\n\r\n I suspect that error is not what is meant to happen, since it's located at: \r\n\r\n```\r\n#!python\r\n\r\n100         if tracks is not None and len(tracks) > 0:\r\n101             # Open hdf5 with track names\r\n102             try:\r\n103                 track_names = []\r\n104                 for track_name, track_filename in tracks:\r\n105                     if path(track_filename).isfile():\r\n106                         if track_name not in track_names:  # No duplicates\r\n107                             track_names.append(track_name)\r\n108                     else:\r\n109                         die(\"Could not find track file: %s\" % track_filename)\r\n110             except ValueError:\r\n111                 die(\"Error saving data from tracks: %s\" % tracks)\r\n```\r\n\r\nwhich is much further along than it should be--unless I'm misunderstanding the purpose of the ValueError above, it looks like it should've errored out back there instead (since this code is with the assumption of valid track_name(s) and track_filename(s)).\r\n\r\nIn fact, if \"-t test.bed\" is specified, track_name will be test.bed and track_filename will be \"\" (hence the current checks in this pull request). With further investigation, even with \"a=b=c\", it passes (\"a\" becomes track_name, and \"b=c\" becomes track_filename). So I do not know if this ValueError is doing what is expected.\r\n\r\n(Under the documentation [for ValueError](https://docs.python.org/2/library/exceptions.html):\r\n\r\n\r\n```\r\n#!python\r\n\r\nexception ValueError\r\n\r\n    Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.\r\n\r\n```\r\n\r\n)\r\n\r\nI don't know how 'strict' we want to be with allowing/disallowing certain expressions (such as \"a=b=c\") or leave it up to the user to specify the correct expression.\r\n\r\nAnd lastly, another question is if we should raise a warning if any track names will be the same.", "title": "Infer track names from signal files", "destination": {"commit": {"hash": "bd61cb52024d", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/bd61cb52024d.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/bd61cb52024d"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1b2ac099b9e3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata/commit/1b2ac099b9e3"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata/commits/1b2ac099b9e3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{384e62ba-0bbf-4f3a-97c9-2e35ea8c1f11}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "rcwchan/genomedata", "uuid": "{384e62ba-0bbf-4f3a-97c9-2e35ea8c1f11}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2016-07-07T15:34:16.930714+00:00"}, "pull_request": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15"}}, "title": "Infer track names from signal files"}}, {"update": {"description": "For example,\r\n\r\n\r\n```\r\n#!python\r\n\r\ngenomedata-load -t /absolute/filepath/here/test1.bed -t test2.bedGraph ...\r\n\r\n```\r\nresults in \r\n\r\n\r\n```\r\n#!python\r\n\r\ntrack name: test1 from track file: /absolute/filepath/here/test1.bed\r\ntrack name: test2 from track file: test2.bedGraph\r\n\r\n```\r\n\r\n---\r\n\r\nSome things of particular note:\r\n\r\nIn the original code for this section:\r\n\r\n\r\n```\r\n#!python\r\n\r\n    # Parse tracks into list of tuples\r\n    try:\r\n        tracks = []\r\n        for track_expr in args.track:\r\n            track_name, _, track_filename = track_expr.partition(\"=\")\r\n            tracks.append((track_name, track_filename))  # Tuple\r\n    except ValueError:\r\n        die((\"Error parsing track expression: %s\\Specify tracks\"\r\n             \"in NAME=FILE form, such as: -t high=signal.high\") % track_expr)\r\n```\r\n\r\none would expect, that before this pull request, if one specified \"-t track.bed\", ValueError would be thrown. However, this is not the case. In fact, genomedata-load will throw this error instead:\r\n\r\n\r\n```\r\n#!python\r\n\r\nCould not find track file: \r\n```\r\n\r\n I suspect that error does not do what it's meant to do, since it's located at: \r\n\r\n```\r\n#!python\r\n\r\n100         if tracks is not None and len(tracks) > 0:\r\n101             # Open hdf5 with track names\r\n102             try:\r\n103                 track_names = []\r\n104                 for track_name, track_filename in tracks:\r\n105                     if path(track_filename).isfile():\r\n106                         if track_name not in track_names:  # No duplicates\r\n107                             track_names.append(track_name)\r\n108                     else:\r\n109                         die(\"Could not find track file: %s\" % track_filename)\r\n110             except ValueError:\r\n111                 die(\"Error saving data from tracks: %s\" % tracks)\r\n```\r\n\r\nwhich is much further along than it should be--unless I'm misunderstanding the purpose of the ValueError above, it looks like it should've errored out back there instead (since this code is with the assumption of valid track_name(s) and track_filename(s)).\r\n\r\nIn fact, if \"-t test.bed\" is specified, track_name will be test.bed and track_filename will be \"\" (hence the current checks in this pull request). With further investigation, even with \"a=b=c\", it passes (\"a\" becomes track_name, and \"b=c\" becomes track_filename). So I do not know if this ValueError is doing what is expected.\r\n\r\n(Under the documentation [for ValueError](https://docs.python.org/2/library/exceptions.html):\r\n\r\n\r\n```\r\n#!python\r\n\r\nexception ValueError\r\n\r\n    Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.\r\n\r\n```\r\n\r\n)\r\n\r\nI don't know how 'strict' we want to be with allowing/disallowing certain expressions (such as \"a=b=c\") or leave it up to the user to specify the correct expression.\r\n\r\nAnd lastly, another question is if we should raise a warning if any track names will be the same.", "title": "Infer track names from signal files", "destination": {"commit": {"hash": "bd61cb52024d", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/bd61cb52024d.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/bd61cb52024d"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1b2ac099b9e3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata/commit/1b2ac099b9e3"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata/commits/1b2ac099b9e3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{384e62ba-0bbf-4f3a-97c9-2e35ea8c1f11}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "rcwchan/genomedata", "uuid": "{384e62ba-0bbf-4f3a-97c9-2e35ea8c1f11}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2016-07-06T21:38:10.501874+00:00"}, "pull_request": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15"}}, "title": "Infer track names from signal files"}}, {"update": {"description": "For example,\r\n\r\n\r\n```\r\n#!python\r\n\r\ngenomedata-load -t /absolute/filepath/here/test1.bed -t test2.bedGraph ...\r\n\r\n```\r\nresults in \r\n\r\n\r\n```\r\n#!python\r\n\r\ntrack name: test1 from track file: /absolute/filepath/here/test1.bed\r\ntrack name: test2 from track file: test2.bedGraph\r\n\r\n```\r\n\r\n---\r\n\r\nSome things of particular note:\r\n\r\nIn the original code for this section:\r\n\r\n\r\n```\r\n#!python\r\n\r\n    # Parse tracks into list of tuples\r\n    try:\r\n        tracks = []\r\n        for track_expr in args.track:\r\n            track_name, _, track_filename = track_expr.partition(\"=\")\r\n            tracks.append((track_name, track_filename))  # Tuple\r\n    except ValueError:\r\n        die((\"Error parsing track expression: %s\\Specify tracks\"\r\n             \"in NAME=FILE form, such as: -t high=signal.high\") % track_expr)\r\n```\r\n\r\none would expect, that before this pull request, if one specified \"-t track.bed\", ValueError would be thrown. However, this is not the case. In fact, genomedata-load will throw this error instead:\r\n\r\n\r\n```\r\n#!python\r\n\r\nCould not find track file: \r\n```\r\n\r\n I suspect that error does not do what it's meant to do, since it's located at: \r\n\r\n```\r\n#!python\r\n\r\n100         if tracks is not None and len(tracks) > 0:\r\n101             # Open hdf5 with track names\r\n102             try:\r\n103                 track_names = []\r\n104                 for track_name, track_filename in tracks:\r\n105                     if path(track_filename).isfile():\r\n106                         if track_name not in track_names:  # No duplicates\r\n107                             track_names.append(track_name)\r\n108                     else:\r\n109                         die(\"Could not find track file: %s\" % track_filename)\r\n110             except ValueError:\r\n111                 die(\"Error saving data from tracks: %s\" % tracks)\r\n```\r\n\r\nwhich is much further along than it should be--unless I'm misunderstanding the purpose of the ValueError above, it looks like it should've errored out back there instead (since this code is with the assumption of valid track_name(s) and track_filename(s)).\r\n\r\nIn fact, if \"-t test.bed\" is specified, track_name will be test.bed and track_filename will be \"\" (hence the current checks in this pull request). With further investigation, even with \"a=b=c\", it passes (\"a\" becomes track_name, and \"b=c\" becomes track_filename). So I do not know if this ValueError is doing what is expected.\r\n\r\n(Under the documentation [for ValueError](https://docs.python.org/2/library/exceptions.html):\r\n\r\n\r\n```\r\n#!python\r\n\r\nexception ValueError\r\n\r\n    Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.\r\n\r\n```\r\n\r\n)\r\n\r\nI don't know how 'strict' we want to be with allowing/disallowing certain expressions (such as \"a=b=c\") or leave it up to the user to specify the correct expression.", "title": "Infer track names from signal files", "destination": {"commit": {"hash": "bd61cb52024d", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/bd61cb52024d.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/bd61cb52024d"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1b2ac099b9e3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata/commit/1b2ac099b9e3"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata/commits/1b2ac099b9e3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{384e62ba-0bbf-4f3a-97c9-2e35ea8c1f11}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "rcwchan/genomedata", "uuid": "{384e62ba-0bbf-4f3a-97c9-2e35ea8c1f11}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2016-07-06T21:37:27.710239+00:00"}, "pull_request": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15"}}, "title": "Infer track names from signal files"}}, {"update": {"description": "For example,\r\n\r\n\r\n```\r\n#!python\r\n\r\ngenomedata-load -t /absolute/filepath/here/test1.bed -t test2.bedGraph ...\r\n\r\n```\r\nresults in \r\n\r\n\r\n```\r\n#!python\r\n\r\ntrack name: test1 from track file: /absolute/filepath/here/test1.bed\r\ntrack name: test2 from track file: test2.bedGraph\r\n\r\n```\r\n\r\n---\r\n\r\nSome things of particular note:\r\n\r\nIn the original code for this section:\r\n\r\n\r\n```\r\n#!python\r\n\r\n    # Parse tracks into list of tuples\r\n    try:\r\n        tracks = []\r\n        for track_expr in args.track:\r\n            track_name, _, track_filename = track_expr.partition(\"=\")\r\n            tracks.append((track_name, track_filename))  # Tuple\r\n    except ValueError:\r\n        die((\"Error parsing track expression: %s\\Specify tracks\"\r\n             \"in NAME=FILE form, such as: -t high=signal.high\") % track_expr)\r\n```\r\n\r\none would expect, that before this pull request, if one specified \"-t track.bed\", ValueError would be thrown. However, this is not the case. In fact, genomedata-load will throw this error instead:\r\n\r\n\r\n```\r\n#!python\r\n\r\nCould not find track file: \r\n```\r\n\r\n I suspect that error does not do what it's meant to do, since it's located at: \r\n\r\n```\r\n#!python\r\n\r\n100         if tracks is not None and len(tracks) > 0:\r\n101             # Open hdf5 with track names\r\n102             try:\r\n103                 track_names = []\r\n104                 for track_name, track_filename in tracks:\r\n105                     if path(track_filename).isfile():\r\n106                         if track_name not in track_names:  # No duplicates\r\n107                             track_names.append(track_name)\r\n108                     else:\r\n109                         die(\"Could not find track file: %s\" % track_filename)\r\n110             except ValueError:\r\n111                 die(\"Error saving data from tracks: %s\" % tracks)\r\n```\r\n\r\nwhich is much further along than it should be--unless I'm misunderstanding the purpose of the ValueError above, it looks like it should've errored out back there instead (since this code is with the assumption of valid track_name(s) and track_filename(s)).\r\n\r\nIn fact, if \"-t test.bed\" is specified, track_name will be test.bed and track_filename will be \"\" (hence the current checks in this pull request). With further investigation, even with \"a=b=c\", it passes (\"a\" becomes track_name, and \"b=c\" becomes track_filename). So I do not know if this ValueError is doing what is expected.\r\n\r\n(Under the documentation [for ValueError](https://docs.python.org/2/library/exceptions.html):\r\n\r\n\r\n```\r\n#!python\r\n\r\nexception ValueError\r\n\r\n    Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.\r\n\r\n```\r\n\r\n)\r\n\r\nI don't know how 'strict' we want to be with allowing/disallowing certain expressions (such as \"a=b=c\") or leave it up to the user to specify the correct expression.", "title": "Infer track names from signal files", "destination": {"commit": {"hash": "bd61cb52024d", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/bd61cb52024d.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/bd61cb52024d"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1b2ac099b9e3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata/commit/1b2ac099b9e3"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata/commits/1b2ac099b9e3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{384e62ba-0bbf-4f3a-97c9-2e35ea8c1f11}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "rcwchan/genomedata", "uuid": "{384e62ba-0bbf-4f3a-97c9-2e35ea8c1f11}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "date": "2016-07-06T21:37:27.666397+00:00"}, "pull_request": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/15.json"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/15"}}, "title": "Infer track names from signal files"}}]}