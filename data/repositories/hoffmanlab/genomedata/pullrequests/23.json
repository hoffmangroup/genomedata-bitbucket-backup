{"rendered": {"description": {"raw": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding for our binary's case (which raises a `SyntaxError`):\r\n\r\n```\r\n#!python\r\n\r\n      File \"/scratch/software/lib/python3.6/tokenize.py\", line 395, in find_cookie\r\n        raise SyntaxError(msg)\r\n    SyntaxError: invalid or missing encoding declaration for 'build/scripts-3.6/Linux_x86_64/genomedata-load-data'\r\n```\r\n\r\n\r\nThe patch is taken from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "markup": "markdown", "html": "<p>Code changes in this pull request generally fall into one of the following categories:</p>\n<ul>\n<li>ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)</li>\n<li>tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). </li>\n<li>Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.</li>\n<li>Generators in Py2 and Py3 have different structure (<code>next</code> in Py2 is now <code>__next__</code> in Py3)</li>\n<li>Installation changes, please see below.</li>\n</ul>\n<p>Notes on installation changes:</p>\n<ul>\n<li><code>build_scripts.run</code> in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the <code>detect_encoding</code> function in <code>tokenize</code> to pass a latin-1 encoding for our binary's case (which raises a <code>SyntaxError</code>):</li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span>      <span class=\"n\">File</span> <span class=\"s2\">&quot;/scratch/software/lib/python3.6/tokenize.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">395</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">find_cookie</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">SyntaxError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n    <span class=\"ne\">SyntaxError</span><span class=\"p\">:</span> <span class=\"n\">invalid</span> <span class=\"ow\">or</span> <span class=\"n\">missing</span> <span class=\"n\">encoding</span> <span class=\"n\">declaration</span> <span class=\"k\">for</span> <span class=\"s1\">&#39;build/scripts-3.6/Linux_x86_64/genomedata-load-data&#39;</span>\n</pre></div>\n\n\n<p>The patch is taken from passacre (<a data-is-external-link=\"true\" href=\"https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0\" rel=\"nofollow\">ref</a>). The <code>detect_encoding</code> function does not exist in Python 2's <code>tokenize</code> module, so it does not affect installation in Python 2. Installation using <code>pip</code> using this workaround works the same as usual.</p>\n<ul>\n<li>Notably, installing using <code>python setup.py install</code> is no longer supported due to issues with <code>easy_install</code> (Unicode issues and exception catching issues amongst other things). </li>\n</ul>\n<p>For example,</p>\n<p>The <code>is_python</code> function in <code>setuptools.easy_install</code> expects a <code>TypeError</code> if null bytes (eg a binary) in Py2:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">software</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python2</span><span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">setuptools</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"o\">/</span><span class=\"n\">easy_install</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">(</span><span class=\"mi\">1879</span><span class=\"p\">)</span><span class=\"n\">is_python</span><span class=\"p\">()</span>\n<span class=\"o\">-&gt;</span> <span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s1\">&#39;exec&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">Pdb</span><span class=\"p\">)</span> <span class=\"n\">n</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;compile() expected string without null bytes&#39;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">software</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python2</span><span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">setuptools</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"o\">/</span><span class=\"n\">easy_install</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">(</span><span class=\"mi\">1879</span><span class=\"p\">)</span><span class=\"n\">is_python</span><span class=\"p\">()</span>\n<span class=\"o\">-&gt;</span> <span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s1\">&#39;exec&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">Pdb</span><span class=\"p\">)</span> \n<span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">software</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python2</span><span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">setuptools</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"o\">/</span><span class=\"n\">easy_install</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">(</span><span class=\"mi\">1880</span><span class=\"p\">)</span><span class=\"n\">is_python</span><span class=\"p\">()</span>\n<span class=\"o\">-&gt;</span> <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">SyntaxError</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">):</span>\n</pre></div>\n\n\n<p>which is why it worked before, but in Py3:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">File</span> <span class=\"s2\">&quot;/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1862</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">is_python</span>\n    <span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s1\">&#39;exec&#39;</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">source</span> <span class=\"n\">code</span> <span class=\"n\">string</span> <span class=\"n\">cannot</span> <span class=\"n\">contain</span> <span class=\"n\">null</span> <span class=\"nb\">bytes</span>\n</pre></div>\n\n\n<p>a ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in <code>easy_install</code> (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support <code>python setup.py install</code> in the future and instead support only pip.</p>\n<p>Compatability notes:</p>\n<ul>\n<li>Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). </li>\n<li>It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.</li>\n</ul>\n<p>For those with access to mordor, vimdiffs of the h5dumps can be found here:</p>\n<ul>\n<li>py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive (<a data-is-external-link=\"true\" href=\"http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html\" rel=\"nofollow\">ref</a>)</li>\n<li>py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive (<a data-is-external-link=\"true\" href=\"http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html\" rel=\"nofollow\">ref</a>)</li>\n<li>py2 genomedata archive compared with a py3 genomedata archive (<a data-is-external-link=\"true\" href=\"http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html\" rel=\"nofollow\">ref</a>)</li>\n<li>modified-by-py3 py2 archive vs modified-by-py2 py3 archive (<a data-is-external-link=\"true\" href=\"http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html\" rel=\"nofollow\">ref</a>)</li>\n</ul>\n<p>Tests notes:</p>\n<ul>\n<li>Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the <code>unittest</code> module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Genomedata python3 compatibility", "markup": "markdown", "html": "<p>Genomedata python3 compatibility</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding for our binary's case (which raises a `SyntaxError`):\r\n\r\n```\r\n#!python\r\n\r\n      File \"/scratch/software/lib/python3.6/tokenize.py\", line 395, in find_cookie\r\n        raise SyntaxError(msg)\r\n    SyntaxError: invalid or missing encoding declaration for 'build/scripts-3.6/Linux_x86_64/genomedata-load-data'\r\n```\r\n\r\n\r\nThe patch is taken from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/genomedata/pullrequests/23/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/genomedata/diffstat/rcwchan/genomedata2:cb877eff86f8%0De857cafc97db?from_pullrequest_id=23"}, "commits": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23.json"}, "comments": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/genomedata/pullrequests/23/merge"}, "html": {"href": "#!/hoffmanlab/genomedata/pull-requests/23"}, "activity": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/genomedata/diff/rcwchan/genomedata2:cb877eff86f8%0De857cafc97db?from_pullrequest_id=23"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/genomedata/pullrequests/23/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/genomedata/pullrequests/23/statuses_page=1.json"}}, "title": "Genomedata python3 compatibility", "close_source_branch": false, "reviewers": [{"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}], "id": 23, "destination": {"commit": {"hash": "e857cafc97db", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/genomedata/commit/e857cafc97db.json"}, "html": {"href": "#!/hoffmanlab/genomedata/commits/e857cafc97db"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/genomedata.json"}, "html": {"href": "#!/hoffmanlab/genomedata"}, "avatar": {"href": "data/bytebucket.org/ravatar/{78038659-1199-46ff-9d0a-675c62f89d60}ts=python"}}, "type": "repository", "name": "genomedata", "full_name": "hoffmanlab/genomedata", "uuid": "{78038659-1199-46ff-9d0a-675c62f89d60}"}, "branch": {"name": "default"}}, "created_on": "2017-07-20T14:36:52.998491+00:00", "summary": {"raw": "Code changes in this pull request generally fall into one of the following categories:\r\n\r\n* ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)\r\n* tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). \r\n* Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.\r\n* Generators in Py2 and Py3 have different structure (`next` in Py2 is now `__next__` in Py3)\r\n* Installation changes, please see below.\r\n\r\nNotes on installation changes:\r\n\r\n* `build_scripts.run` in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the `detect_encoding` function in `tokenize` to pass a latin-1 encoding for our binary's case (which raises a `SyntaxError`):\r\n\r\n```\r\n#!python\r\n\r\n      File \"/scratch/software/lib/python3.6/tokenize.py\", line 395, in find_cookie\r\n        raise SyntaxError(msg)\r\n    SyntaxError: invalid or missing encoding declaration for 'build/scripts-3.6/Linux_x86_64/genomedata-load-data'\r\n```\r\n\r\n\r\nThe patch is taken from passacre ([ref](https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0)). The `detect_encoding` function does not exist in Python 2's `tokenize` module, so it does not affect installation in Python 2. Installation using `pip` using this workaround works the same as usual.\r\n\r\n* Notably, installing using `python setup.py install` is no longer supported due to issues with `easy_install` (Unicode issues and exception catching issues amongst other things). \r\n\r\nFor example,\r\n\r\nThe `is_python` function in `setuptools.easy_install` expects a `TypeError` if null bytes (eg a binary) in Py2:\r\n\r\n\r\n```\r\n#!python\r\n\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) n\r\nTypeError: 'compile() expected string without null bytes'\r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1879)is_python()\r\n-> compile(text, filename, 'exec')\r\n(Pdb) \r\n> /scratch/software/lib/python2.7/site-packages/setuptools/command/easy_install.py(1880)is_python()\r\n-> except (SyntaxError, TypeError):\r\n```\r\n\r\nwhich is why it worked before, but in Py3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nFile \"/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py\", line 1862, in is_python\r\n    compile(text, filename, 'exec')\r\nValueError: source code string cannot contain null bytes\r\n```\r\n\r\na ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in `easy_install` (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support `python setup.py install` in the future and instead support only pip.\r\n\r\nCompatability notes:\r\n\r\n* Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). \r\n* It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.\r\n\r\nFor those with access to mordor, vimdiffs of the h5dumps can be found here:\r\n\r\n* py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html))\r\n* py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html))\r\n* py2 genomedata archive compared with a py3 genomedata archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html))\r\n* modified-by-py3 py2 archive vs modified-by-py2 py3 archive ([ref](http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html))\r\n\r\nTests notes:\r\n\r\n* Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the `unittest` module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.", "markup": "markdown", "html": "<p>Code changes in this pull request generally fall into one of the following categories:</p>\n<ul>\n<li>ArgumentParser no longer accepts a version argument as part of its constructor; it must be added as a separate parsed argument (modified for all genomedata tools)</li>\n<li>tracknames must be encoded into the hdf5 archive as bytestrings (resulting in a CSET_ASCII attribute), or else some unicode craziness will happen (this is very possibly related to a known numpy pickling issue, as pytables uses numpy pickling internally). </li>\n<li>Python 3 is much less lax about type checking, so sometimes objects need to be checked for whether they're byte type or unicode type, and then encoded as appropriate.</li>\n<li>Generators in Py2 and Py3 have different structure (<code>next</code> in Py2 is now <code>__next__</code> in Py3)</li>\n<li>Installation changes, please see below.</li>\n</ul>\n<p>Notes on installation changes:</p>\n<ul>\n<li><code>build_scripts.run</code> in Python 3 now expects a script of Unicode encoding, but we are able to get around that by overriding the <code>detect_encoding</code> function in <code>tokenize</code> to pass a latin-1 encoding for our binary's case (which raises a <code>SyntaxError</code>):</li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span>      <span class=\"n\">File</span> <span class=\"s2\">&quot;/scratch/software/lib/python3.6/tokenize.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">395</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">find_cookie</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">SyntaxError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n    <span class=\"ne\">SyntaxError</span><span class=\"p\">:</span> <span class=\"n\">invalid</span> <span class=\"ow\">or</span> <span class=\"n\">missing</span> <span class=\"n\">encoding</span> <span class=\"n\">declaration</span> <span class=\"k\">for</span> <span class=\"s1\">&#39;build/scripts-3.6/Linux_x86_64/genomedata-load-data&#39;</span>\n</pre></div>\n\n\n<p>The patch is taken from passacre (<a data-is-external-link=\"true\" href=\"https://github.com/habnabit/passacre/commit/2ea05ba94eab2d26951ae7b4b51abf53132b20f0\" rel=\"nofollow\">ref</a>). The <code>detect_encoding</code> function does not exist in Python 2's <code>tokenize</code> module, so it does not affect installation in Python 2. Installation using <code>pip</code> using this workaround works the same as usual.</p>\n<ul>\n<li>Notably, installing using <code>python setup.py install</code> is no longer supported due to issues with <code>easy_install</code> (Unicode issues and exception catching issues amongst other things). </li>\n</ul>\n<p>For example,</p>\n<p>The <code>is_python</code> function in <code>setuptools.easy_install</code> expects a <code>TypeError</code> if null bytes (eg a binary) in Py2:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">software</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python2</span><span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">setuptools</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"o\">/</span><span class=\"n\">easy_install</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">(</span><span class=\"mi\">1879</span><span class=\"p\">)</span><span class=\"n\">is_python</span><span class=\"p\">()</span>\n<span class=\"o\">-&gt;</span> <span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s1\">&#39;exec&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">Pdb</span><span class=\"p\">)</span> <span class=\"n\">n</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;compile() expected string without null bytes&#39;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">software</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python2</span><span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">setuptools</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"o\">/</span><span class=\"n\">easy_install</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">(</span><span class=\"mi\">1879</span><span class=\"p\">)</span><span class=\"n\">is_python</span><span class=\"p\">()</span>\n<span class=\"o\">-&gt;</span> <span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s1\">&#39;exec&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">Pdb</span><span class=\"p\">)</span> \n<span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">software</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python2</span><span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">setuptools</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"o\">/</span><span class=\"n\">easy_install</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">(</span><span class=\"mi\">1880</span><span class=\"p\">)</span><span class=\"n\">is_python</span><span class=\"p\">()</span>\n<span class=\"o\">-&gt;</span> <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">SyntaxError</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">):</span>\n</pre></div>\n\n\n<p>which is why it worked before, but in Py3:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">File</span> <span class=\"s2\">&quot;/scratch/software/lib/python3.6/site-packages/setuptools/command/easy_install.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1862</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">is_python</span>\n    <span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s1\">&#39;exec&#39;</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">source</span> <span class=\"n\">code</span> <span class=\"n\">string</span> <span class=\"n\">cannot</span> <span class=\"n\">contain</span> <span class=\"n\">null</span> <span class=\"nb\">bytes</span>\n</pre></div>\n\n\n<p>a ValueError is given instead, hence why this no longer works. Technically, we can get around this by overriding the function in <code>easy_install</code> (and all the others that now break for various reasons), but after discussing with Eric, we decided we would simply not support <code>python setup.py install</code> in the future and instead support only pip.</p>\n<p>Compatability notes:</p>\n<ul>\n<li>Python 3/2-created genomedata archives seem compatible with Python 2/3 genomedata operations using basic tests that I tried, though Python 2/3-created archives differ in encoding for some attributes and the null/0 dataspace for the hdf5 'title' attribute (historically left empty in genomedata archives). </li>\n<li>It is possible that reverse-compatibility may break if the user uses, for example, Chinese characters in their tracknames etc.</li>\n</ul>\n<p>For those with access to mordor, vimdiffs of the h5dumps can be found here:</p>\n<ul>\n<li>py2 genomedata archive modified by py3 genomedata, vimdiff of original py2 archive with modified-by-py3 archive (<a data-is-external-link=\"true\" href=\"http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3diff.html\" rel=\"nofollow\">ref</a>)</li>\n<li>py3 genomedata archive modified by py2 genomedata, vimdiff of original py3 archive with modified-by-py2 archive (<a data-is-external-link=\"true\" href=\"http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py3to2diff.html\" rel=\"nofollow\">ref</a>)</li>\n<li>py2 genomedata archive compared with a py3 genomedata archive (<a data-is-external-link=\"true\" href=\"http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2orig_py3orig_diff.html\" rel=\"nofollow\">ref</a>)</li>\n<li>modified-by-py3 py2 archive vs modified-by-py2 py3 archive (<a data-is-external-link=\"true\" href=\"http://mordor/hoffmanlab/people/rcwchan/internal/2017/data/20170719_py2to3_py3to2_diff.html\" rel=\"nofollow\">ref</a>)</li>\n</ul>\n<p>Tests notes:</p>\n<ul>\n<li>Using the same code base, all tests pass using Py2 genomedata and Py3 genomedata, though note that Python 3 will spew out a billion ResourceWarnings (because we pass an open file handle around). There is not an easy way to disable this, as the <code>unittest</code> module resets the warning filters to default at every test. If this is an issue, I can try manually overriding it at every test--please let me know.</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "cb877eff86f8", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2/commit/cb877eff86f8"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2/commits/cb877eff86f8"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/genomedata2"}, "html": {"href": "https://bitbucket.org/rcwchan/genomedata2"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}ts=python"}}, "type": "repository", "name": "genomedata2", "full_name": "rcwchan/genomedata2", "uuid": "{1f2c8915-12d9-4139-8de8-2a2a24c1fdf0}"}, "branch": {"name": "py3-port"}}, "comment_count": 20, "state": "OPEN", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2017-07-27T18:28:37.248116+00:00", "type": "participant", "approved": false, "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}}, {"role": "PARTICIPANT", "participated_on": "2017-07-27T18:04:13.195394+00:00", "type": "participant", "approved": false, "user": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}}, {"role": "PARTICIPANT", "participated_on": "2017-07-27T18:45:04.910808+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Hoffman", "uuid": "{ffa8e039-5d4d-4f69-a4ba-ac25cbaf700b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bffa8e039-5d4d-4f69-a4ba-ac25cbaf700b%7D"}, "html": {"href": "https://bitbucket.org/%7Bffa8e039-5d4d-4f69-a4ba-ac25cbaf700b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6a95e857a02504cbad5fe965c9d9e4bbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMH-1.png"}}, "nickname": "hoffman", "type": "user", "account_id": "557058:a9657985-692c-405c-995b-4e41cda7ba2b"}}], "reason": "", "updated_on": "2017-07-27T18:45:04.966861+00:00", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "merge_commit": null, "closed_by": null}